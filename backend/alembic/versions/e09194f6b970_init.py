"""init

Revision ID: e09194f6b970
Revises: 
Create Date: 2025-05-04 18:10:19.349334

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e09194f6b970'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('locations',
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('location_name', sa.String(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('location_id')
    )
    op.create_index(op.f('ix_locations_location_id'), 'locations', ['location_id'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('aadhar_card', sa.String(), nullable=False),
    sa.Column('pan_card', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('aadhar_card'),
    sa.UniqueConstraint('pan_card')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('accounts',
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('account_balance', sa.Float(), nullable=False),
    sa.Column('card_type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('account_id')
    )
    op.create_index(op.f('ix_accounts_account_id'), 'accounts', ['account_id'], unique=False)
    op.create_table('devices',
    sa.Column('device_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('device_type', sa.String(), nullable=True),
    sa.Column('is_new_device', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('device_id')
    )
    op.create_table('transaction_metrics',
    sa.Column('metric_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('daily_transaction_count', sa.Integer(), nullable=True),
    sa.Column('weekly_transaction_count', sa.Integer(), nullable=True),
    sa.Column('monthly_transaction_count', sa.Integer(), nullable=True),
    sa.Column('avg_transaction_amount_7d', sa.Float(), nullable=True),
    sa.Column('failed_transaction_count_7d', sa.Integer(), nullable=True),
    sa.Column('avg_transaction_distance', sa.Float(), nullable=True),
    sa.Column('time_since_last_transaction', sa.Float(), nullable=True),
    sa.Column('transaction_distance', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('metric_id')
    )
    op.create_index(op.f('ix_transaction_metrics_metric_id'), 'transaction_metrics', ['metric_id'], unique=False)
    op.create_table('transactions',
    sa.Column('transaction_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.String(), nullable=True),
    sa.Column('transaction_amount', sa.Float(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('transaction_hour', sa.Integer(), nullable=True),
    sa.Column('is_weekend', sa.Boolean(), nullable=True),
    sa.Column('beneficiary_account_number', sa.String(), nullable=True),
    sa.Column('origin_location_id', sa.Integer(), nullable=True),
    sa.Column('beneficiary_location_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.account_id'], ),
    sa.ForeignKeyConstraint(['beneficiary_location_id'], ['locations.location_id'], ),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], ),
    sa.ForeignKeyConstraint(['origin_location_id'], ['locations.location_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('transaction_id')
    )
    op.create_index(op.f('ix_transactions_transaction_id'), 'transactions', ['transaction_id'], unique=False)
    op.create_table('fraud_details',
    sa.Column('fraud_id', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.Integer(), nullable=True),
    sa.Column('fraud_label', sa.Boolean(), nullable=True),
    sa.Column('fraud_type', sa.String(), nullable=True),
    sa.Column('previous_fraudulent_activity', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.transaction_id'], ),
    sa.PrimaryKeyConstraint('fraud_id'),
    sa.UniqueConstraint('transaction_id')
    )
    op.create_index(op.f('ix_fraud_details_fraud_id'), 'fraud_details', ['fraud_id'], unique=False)
    op.create_table('risk_assessments',
    sa.Column('assessment_id', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.Integer(), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=True),
    sa.Column('ip_address_flag', sa.Boolean(), nullable=True),
    sa.Column('transaction_location_flag', sa.Boolean(), nullable=True),
    sa.Column('suspicious_ip_flag', sa.Boolean(), nullable=True),
    sa.Column('multiple_account_login', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.transaction_id'], ),
    sa.PrimaryKeyConstraint('assessment_id'),
    sa.UniqueConstraint('transaction_id')
    )
    op.create_index(op.f('ix_risk_assessments_assessment_id'), 'risk_assessments', ['assessment_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_risk_assessments_assessment_id'), table_name='risk_assessments')
    op.drop_table('risk_assessments')
    op.drop_index(op.f('ix_fraud_details_fraud_id'), table_name='fraud_details')
    op.drop_table('fraud_details')
    op.drop_index(op.f('ix_transactions_transaction_id'), table_name='transactions')
    op.drop_table('transactions')
    op.drop_index(op.f('ix_transaction_metrics_metric_id'), table_name='transaction_metrics')
    op.drop_table('transaction_metrics')
    op.drop_table('devices')
    op.drop_index(op.f('ix_accounts_account_id'), table_name='accounts')
    op.drop_table('accounts')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_locations_location_id'), table_name='locations')
    op.drop_table('locations')
    # ### end Alembic commands ###
